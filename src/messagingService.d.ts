import { ConversationScope } from "@comapi/sdk-js-foundation";
import { IComapiChatConfig, IChatConversation, IChatMessage, IChatInfo } from "./interfaces";
import { IFoundation, IConversationParticipant, IConversationMessage } from "@comapi/sdk-js-foundation";
export declare class MessagingService {
    private _foundation;
    private _config;
    private _mutex;
    constructor(_foundation: IFoundation, _config: IComapiChatConfig);
    initialise(config: IComapiChatConfig): Promise<boolean>;
    uninitialise(): Promise<boolean>;
    synchronize(scope?: ConversationScope): Promise<boolean>;
    getPreviousMessages(conversationId: string): Promise<boolean>;
    getConversations(): Promise<IChatConversation[]>;
    getConversationInfo(conversationId: string): Promise<IChatInfo>;
    sendTextMessage(conversationId: string, text: string): Promise<boolean>;
    sendMessage(conversationId: string, message: IConversationMessage): Promise<boolean>;
    markMessagesAsRead(conversationId: string, messageIds: string[]): Promise<boolean>;
    markAllMessagesAsRead(conversationId: string): Promise<boolean>;
    isMessageRead(message: IChatMessage, profileId?: string): boolean;
    createConversation(conversation: IChatConversation): Promise<boolean>;
    updateConversation(conversation: IChatConversation): Promise<boolean>;
    deleteConversation(conversationId: string): Promise<boolean>;
    getParticipantsInConversation(conversationId: string): Promise<IConversationParticipant[]>;
    addParticipantsToConversation(conversationId: string, participants: IConversationParticipant[]): Promise<boolean>;
    deleteParticipantsFromConversation(conversationId: string, participants: string[]): Promise<boolean>;
    private getMessages(conversation);
    private mapConversation(conversation);
    private getConversationSyncInfo(remoteConversations, localConversations);
    private updateConversationWithEvents(conversation);
    private synchronizeConversation(conversation);
    private _applyConversationMessageEvent(event);
    private applyConversationMessageEvent(event);
    private onConversationMessageEvent(event);
    private _onConversationMessageEvent(event);
    private onConversationDeleted(event);
    private onConversationUpdated(event);
    private initialiseConversation(conversationId, depth?);
    private onParticipantAdded(event);
    private onParticipantRemoved(event);
}
