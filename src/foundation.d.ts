import { IEventManager, ILogger, ILocalStorageData, ISession, IDeviceManager, IFacebookManager, IConversationManager, IProfileManager, IMessageManager, IComapiConfig, IServices, IDevice, IChannels, IFoundation, INetworkManager } from "./interfaces";
import { ConversationBuilder } from "./conversationBuilder";
import { MessageBuilder } from "./messageBuilder";
import { MessageStatusBuilder } from "./messageStatusBuilder";
import { ComapiConfig } from "./comapiConfig";
import { InterfaceManager } from "./interfaceManager";
import { INTERFACE_SYMBOLS } from "./interfaceSymbols";
export { ComapiConfig, MessageStatusBuilder, ConversationBuilder, MessageBuilder, InterfaceManager, INTERFACE_SYMBOLS };
export declare class Foundation implements IFoundation {
    private _eventManager;
    private _logger;
    private _networkManager;
    private static _foundation;
    private _services;
    private _device;
    private _channels;
    static initialiseShared(comapiConfig: IComapiConfig): Promise<Foundation>;
    static initialise(comapiConfig: IComapiConfig): Promise<Foundation>;
    static readonly version: string;
    private static _initialise(comapiConfig, doSingleton);
    constructor(_eventManager: IEventManager, _logger: ILogger, _localStorageData: ILocalStorageData, _networkManager: INetworkManager, _deviceManager: IDeviceManager, _facebookManager: IFacebookManager, _conversationManager: IConversationManager, _profileManager: IProfileManager, _messageManager: IMessageManager, _comapiConfig: IComapiConfig);
    startSession(): Promise<ISession>;
    endSession(): Promise<boolean>;
    readonly services: IServices;
    readonly device: IDevice;
    readonly channels: IChannels;
    readonly session: ISession;
    readonly logger: ILogger;
    on(eventType: string, handler: Function): void;
    off(eventType: string, handler?: Function): void;
    getLogs(): Promise<string>;
}
